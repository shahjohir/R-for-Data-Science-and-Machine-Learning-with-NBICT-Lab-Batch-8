data(mtcars)
logit_model <- glm(am ~ wt + hp,
data = mtcars,
family = binomial(link = "logit"))
summary(logit_model)
View(logit_model)
View(logit_model)
predicted_probabilities <- predict(logit_model, type = "response")
predicted_classes <- ifelse(predicted_probabilities > 0.5, 1, 0)
confusion_matrix <- table(Predicted = predicted_classes, Actual = mtcars$am)
print("Confusion Matrix:")
print(confusion_matrix)
View(logit_model)
reticulate::repl_python()
library(psych)
psych::describe(data)
describe(data)
library(readxl)
dataset <- read_excel(NULL)
library(readxl)
RCBD <- read_excel("C:/Users/USER/Desktop/RCBD.csv")
setwd("E:/Kumu and Traninng/TRAININGS/R Training/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-Batch-8/RDSML-Day-12 ðŸ‘‰ Scatter Plot in R (Part-3)")
library(ggplot2)
dataset = mtcars
View(dataset)
View(dataset)
# Converting cyl column from a numeric to a factor variable
dataset$cyl = as.factor(dataset$cyl)
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point()
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = lm)
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg, colors( = cyl))) +
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg, colors( = cyl))) +
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg, colors( = cyl)) +
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg, colors = cyl)) +
geom_point() +
geom_smooth(method = lm)
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg, colors = cyl))) +
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg, color = cyl)) +
geom_point() +
geom_smooth(method = lm)
# Adding regression lines based on multiple groups
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm)
# Removing the confidence intervals
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE)
# Extending the regression lines
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
# Filling the color of confidence bands
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, aes(fill = cyl), fullrange = TRUE)
geom_smooth(method = lm, aes(fill = cyl)
# Filling the color of confidence bands
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
# Filling the color of confidence bands
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, aes(fill = cyl))
# Filling the color of confidence bands
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = TRUE, aes(fill = cyl))
# Changing point shapes manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)
# Changing point shapes manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(16, 3, 17))
# Changing point shapes manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(4, 3, 17))
# Changing point shapes manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(8, 3, 17))
# Changing point shapes manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(8, 3, 20))
# Changing point shapes manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(8, 3, 15))
# Changing point shapes manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17))
# Changing point shapes manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
theme(legend.position = "top")
# Changing point colors manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey''orange'))
# Changing point colors manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey','orange'))
# Changing point colors manually
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey','orange'))+
theme(legend.position = "top")
# Customizing scatter plots
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey','orange'))+
labs(title = 'Miles Per Gallons according to the Weight')+
theme(legend.position = "top")
# Customizing scatter plots
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey','orange'))+
labs(title = 'Miles Per Gallon according to the Weight')+
theme(legend.position = "top")
# Customizing scatter plots
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey','orange'))+
labs(title = 'Miles Per Gallon \n according to the Weight')+
theme(legend.position = "top")
# Customizing scatter plots
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey','orange'))+
labs(title = 'Miles Per Gallon \naccording to the Weight')+
theme(legend.position = "top")
# Customizing scatter plots
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey','orange'))+
labs(title = 'Miles Per Gallon according to the Weight')+
theme(legend.position = "top")
# Customizing scatter plots
ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey','orange'))+
labs(title = 'Miles Per Gallon according to the Weight',
x = 'Weight', y = 'Miles per gallon')+
theme(legend.position = "top")
# Customizing themes
plot = ggplot(dataset, aes(x = wt, y = mpg, color = cyl, shape = cyl)) +
geom_point() +
geom_smooth(method = lm, se = FALSE, fullrange = TRUE)+
scale_shape_manual(values = c(3, 16, 17)) +
scale_color_manual(values = c('darkblue', 'grey','orange'))+
labs(title = 'Miles Per Gallon according to the Weight',
x = 'Weight', y = 'Miles per gallon')+
theme(legend.position = "top")
plot + theme_classic()
plot = theme_minimal()
