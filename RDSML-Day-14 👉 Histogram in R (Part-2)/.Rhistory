data(mtcars)
logit_model <- glm(am ~ wt + hp,
data = mtcars,
family = binomial(link = "logit"))
summary(logit_model)
View(logit_model)
View(logit_model)
predicted_probabilities <- predict(logit_model, type = "response")
predicted_classes <- ifelse(predicted_probabilities > 0.5, 1, 0)
confusion_matrix <- table(Predicted = predicted_classes, Actual = mtcars$am)
print("Confusion Matrix:")
print(confusion_matrix)
View(logit_model)
reticulate::repl_python()
library(psych)
psych::describe(data)
describe(data)
library(readxl)
dataset <- read_excel(NULL)
library(readxl)
RCBD <- read_excel("C:/Users/USER/Desktop/RCBD.csv")
setwd("E:/Kumu and Traninng/TRAININGS/R Training/R-for-Data-Science-and-Machine-Learning-with-NBICT-Lab-Batch-8/RDSML-Day-14 ðŸ‘‰ Histogram in R (Part-2)")
dataset = read.csv("data.csv")
# Importing the library
library(ggplot2)
# Basic histogram using ggplot2
ggplot (dataset, aes(x = weight)) +
geom_histogram(clor = white)
# Basic histogram using ggplot2
ggplot (dataset, aes(x = weight)) +
geom_histogram(clor = "white")
# Basic histogram using ggplot2
ggplot (dataset, aes(x = weight)) +
geom_histogram(clor = "black")
# Basic histogram using ggplot2
ggplot (dataset, aes(x = weight)) +
geom_histogram(clor = "white")
# Changing histogram plot line colors by groups
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(clor = "white")
# Changing histogram plot line colors by groups
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white")
# Changing histogram plot line colors by groups
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 2, clor = "white")
# Changing histogram plot line colors by groups
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white")
# Changing histogram plot line colors by groups
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5)
# Changing histogram plot line colors by groups
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5, position = "identity")
ggplot(dataset, aes(x = weight))+
geom_histogram(binwidth = 1, color = "black", fill= "white")
ggplot(dataset, aes(x = weight))+
geom_histogram(binwidth = 1, color = "white", fill= "white")
# Changing histogram plot line colors by groups
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5, position = "identity")
#Inter leaved histogram
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5, position = "identity")
#Inter leaved histogram
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5, position = "dodge")
#Inter leaved histogram
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5, position = "stack")
#Inter leaved histogram
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5, position = "dodge")
#Inter leaved histogram
ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5, position = "dodge") +
theme(legend.position = "top")
# The plyr package is used to calculate the mean weight of each group
install.packages("plyr")
library(plyr)
group_means = ddply(dataset, "sex", summarise, grp.mean= mean(weight))
group_means
# Adding mean lines
myplot = ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5, position = "dodge") +
geom_vline(data = group_means, aes(xintercept = grp.mean))
# Adding mean lines
myplot = ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, clor = "white", alpha = 0.5, position = "dodge") +
geom_vline(data = group_means, aes(xintercept = grp.mean))+
theme(legend.position = "top")
theme(legend.position = "top")
# Adding mean lines
myplot = ggplot (dataset, aes(x = weight, fill = sex)) +
geom_histogram(binwidth = 1, color = "white", alpha = 0.5, position = "dodge") +
geom_vline(data = group_means, aes(xintercept = grp.mean, color = sex)) +
theme(legend.position = "top")
# Adding mean lines
myPlot = ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "dodge") +
geom_vline(data = group_means, aes(xintercept = grp.mean, color = sex),
linetype = "dashed") +
theme(legend.position = "top")
# Adding mean lines
myPlot = ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "dodge") +
geom_vline(data = group_means, aes(xintercept = grp.mean, color = sex),
linetype = "dashed") +
theme(legend.position = "top")
# Importing the dataset
dataset = read.csv("data.csv")
# Importing the library
library(ggplot2)
# Creating the basic histogram
ggplot(dataset, aes(x = weight)) +
geom_histogram(color = "white")
# Changing histogram plot line colors by groups
ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "identity")
# We can change the position adjustment
# to use for overlapping points on the layer.
# Possible values for the argument position are
# "identity", "stack", "dodge". Default value is "stack".
# Interleaved histograms
ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "dodge") +
theme(legend.position = "top")
# The plyr package is used to calculate
# the mean weight of each group.
# install.packages("plyr")
library(plyr)
group_means = ddply(dataset, "sex", summarise, grp.mean = mean(weight))
group_means
# Adding mean lines
myPlot = ggplot(dataset, aes(x = weight, fill = sex)) +
geom_histogram(color = "white", alpha = .5, position = "dodge") +
geom_vline(data = group_means, aes(xintercept = grp.mean, color = sex),
linetype = "dashed") +
theme(legend.position = "top")
myPlot
myPlot = scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("green", "orange"))
myPlot = scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("green", "orange"))
myPlot + scale_color_manual(values = c("red", "blue")) +
scale_fill_manual(values = c("green", "orange"))
myPlot + scale_color_manual(values = c("#999999", "#E69F00")) +
scale_fill_manual(values = c("#999999", "#E69F00"))
# Using color brewer color palettes
myplot + scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
myplot + scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
myPlot + scale_color_manual(values = c("#999999", "#E69F00")) +
scale_fill_manual(values = c("#999999", "#E69F00"))
# Using color brewer color palettes
myplot + scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2")
# Using a grey scale
myplot + scale_color_grey() + scale_fill_grey()
# Using a grey scale
myplot + scale_color_grey() + scale_fill_grey() +
theme_classic()
